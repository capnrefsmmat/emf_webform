<?php
/**
 * @file
 * Integrate with Campaign Monitor to create new subscribers via webform
 */

/**
 * Implements hook_menu() to get the config page listed
 */
function cm_webform_menu() {
  $items = array();

  $items['admin/config/services/cm_webform'] = array(
    'title' => 'Campaign Monitor Webform',
    'description' => 'Set up Campaign Monitor Webform integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_webform_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cm_webform.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_webform_component_info().
 */
function cm_webform_webform_component_info() {
  $components = array();

  $components['cm_signup'] = array(
    'label' => t('Campaign Monitor list signup'),
    'description' => t('Checkboxes for signing up to selected lists'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'conditional' => TRUE,
      'group' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/cm_signup.inc',
  );

  return $components;
}

/**
 * Implements hook_webform_submission_presave().
 *
 * There's three possibilities here:
 *  1. The user is filling out the webform for the first time and is creating a new subscription.
 *  2. The user is registered and using Webform's submission editing feature to update the subscription.
 *  3. The user is unregistered and using our multi-page webform hack to update the subscription.
 *     This won't update the saved Webform submission.
 *
 *  This system also supports subscribing to multiple mailing lists by adding multiple cm_signup
 *  components to the webform.
 *
 *  @todo Handle possibility of unsubscribed users editing their data anyway.
 */
function cm_webform_webform_submission_presave($node, $submission) {
  require_once libraries_get_path('createsend-php') . '/csrest_subscribers.php';
  $cm = new CS_REST_Subscribers('', variable_get('cm_apikey', ''), 'https');
  
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'cm_signup') {
      // Extract submitted values
      $list = $component['extra']['lists'];
      $cm->set_list_id($list);
      
      // Field containing email address is based on the component configuration
      $email = $submission->data[$component['extra']['email_field']]['value'][0];
      
      $wantsToSubscribe = ($submission->data[$cid]['value'][0] == 1);
      if ($wantsToSubscribe && empty($email)) {
        // If they didn't specify an email address, don't bother sending it to Campaign Monitor.
        continue;
      }
      
      if (!empty($submission->data[$component['extra']['name_field']]['value'])) {
        $name = $submission->data[$component['extra']['name_field']]['value'][0];
      }
      else {
        $name = '';
      }
      
      $fields = array();
      $custom_fields = array_keys(array_filter($component['extra']['custom_fields']));
      
      foreach ($custom_fields as $field) {
        if ($node->webform['components'][$field]['type'] == "select") {
          $itemLines = explode("\n", $node->webform['components'][$field]['extra']['items']);
          $items = array();
          foreach ($itemLines as $item) {
            $item = explode('|', $item);
            if (count($item) < 2) {
              continue;
            }
            $items[$item[0]] = trim($item[1]);
          }
          $value = array();
          foreach ($submission->data[$field]['value'] as $val => $val) {
            $value[] = $items[$val];
          }
          $value = implode(',', $value);
          $fields[] = array('Key' => $node->webform['components'][$field]['form_key'],
                            'Value' => $value);
        }
        else {
          $fields[] = array('Key' => $node->webform['components'][$field]['form_key'],
                            'Value' => $submission->data[$field]['value'][0]);
        }
      }

      // Determine whethere they have a previous submission (case 2)
      $result = db_query("SELECT 'data' FROM {webform_submitted_data} WHERE sid = :sid AND cid = :cid",
                                   array(':sid' => $submission->sid, ':cid' => $component['extra']['email_field']));
      $r = $result->fetchAssoc();
      
      $original_email = ($r !== FALSE) ? $r['data'] : $email;
      $listName = cm_webform_get_lists($list);
      if ($listName === FALSE) {
        // An error occurred connecting to Campaign Monitor. Abort.
        drupal_set_message(t('An error occurred editing your mailing list subscription. Please try again.'), 'error');
        return;
      }
      
      $subscriptionStatus = cm_webform_subscription_status($cm, $original_email);
      
      // If they're active and want to edit or unsubscribe, or unsubscribed and want to edit...
      if ($subscriptionStatus == 'Active' ||
          ($subscriptionStatus != 'Active' && !$wantsToSubscribe)) {
        if (!$wantsToSubscribe && $subscriptionStatus == 'Active' && $component['extra']['unsubscribe']) {
          // They don't want to subcribe and they're currently active, so unsubscribe.
          $r = cm_webform_unsubscribe($cm, $listName, $original_email);
          if ($r) {
            drupal_set_message(t('You have been successfully unsubscribed from the list "@list".',
                                 array('@list' => $listName)), 'status');
          }
          else {
            drupal_set_message(t('An error occurred when trying to unsubscribe you from the list "@list". Please try again.',
                                 array('@list' => $listName)), 'error');
          }
        }
        if ($subscriptionStatus !== FALSE && !(!$wantsToSubscribe && !$component['extra']['unsubscribe'])) {
          // Update their subscription, even if they're unsubscribed
          $r = cm_webform_update_subscription($cm, $listName, $email, $original_email, $name, $fields);
          if ($r) {
            drupal_set_message(t('Your subscription to the list "@list" has been successfully updated.',
                                 array('@list' => $listName)), 'status');
          }
          else {
            drupal_set_message(t('An error occurred when updating your subscription to "@list". Please try again.',
                                 array('@list' => $listName)), 'error');
          }
        }
      }
      elseif ($wantsToSubscribe) {
        // They're not subscribed and want to be.
        $r = cm_webform_insert_subscription($cm, $listName, $email, $name, $fields);
        
        // Only show success message if (a) they're updating previous subscription settings or
        // (b) the admin has said we should
        if ($email != $original_email || variable_get('cm_showmsg', 0)) {
          if ($r) {
            drupal_set_message(t('You have been successfully subscribed to the list "@list".',
                                 array('@list' => $listName)), 'status');
          }
          else {
            drupal_set_message(t('An error occurred when subscribing you to the list "@list". Please try again.',
                                 array('@list' => $listName)), 'error');
          }
        }
      }
    }
  }
}

/**
 * Helper function to insert a new subscription. Warning: Will resubscribe the user
 * if they've previously unsubscribed. Use only when they've checked the box to subscribe explicitly.
 */
function cm_webform_insert_subscription(&$cm, $lname, $email, $name, $fields) {
  $r = $cm->add(array('EmailAddress' => $email,
                      'Name' => $name,
                      'Resubscribe' => TRUE,
                      'CustomFields' => $fields));
  
  if (!$r->was_successful()) {
    watchdog('cm_webform', 'A Campaign Monitor @code error occurred when subscribing @email to list "@list": @error',
             array('@email' => $email, '@error' => $r->response->Message,
                   '@code' => $r->http_status_code, '@list' => $lname),
             WATCHDOG_ERROR);
    return FALSE;
  }
  
  watchdog('cm_webform', 'Email @email has been subscribed to list "@list" via Campaign Monitor.',
           array('@email' => $email, '@list' => $lname), WATCHDOG_INFO);
  return TRUE;
}


/**
 * Helper function to update a subscription in Campaign Monitor. 
 */
function cm_webform_update_subscription(&$cm, $lname, $email, $original_email, $name, $fields) {
  // Update the selected subscription
  $r = $cm->update($original_email, array('EmailAddress' => $email,
                                          'Name' => $name,
                                          'Resubscribe' => FALSE,
                                          'CustomFields' => $fields));
  
  if (!$r->was_successful()) {
    watchdog('cm_webform', 'A Campaign Monitor @code error occurred when updating the subscription of @email to list "@list": @error',
                             array('@email' => $original_email, '@error' => $r->response->Message,
                                   '@code' => $r->http_status_code, '@list' => $lname),
             WATCHDOG_ERROR);
    return FALSE;
  }
  
  watchdog('cm_webform', 'Email @email has had its subscription to list "@list" updated via Campaign Monitor.',
           array('@email' => $original_email, '@list' => $lname), WATCHDOG_NOTICE);
  return TRUE;
}

/**
 * Helper function to unsubscribe a user through Campaign Monitor.
 */
function cm_webform_unsubscribe(&$cm, $lname, $email) {
  $r = $cm->unsubscribe($email);
  if (!$r->was_successful()) {
    watchdog('cm_webform', 'A Campaign Monitor @code error occurred when unsubscribing @email from list "@list": @error',
                             array('@email' => $email, '@error' => $r->response->Message,
                                   '@code' => $r->http_status_code, '@list' => $lname),
             WATCHDOG_ERROR);
    return FALSE;
  }
  
  watchdog('cm_webform', 'Email @email has been unsubscribed from list "@list" via Campaign Monitor.',
           array('@email' => $email, '@list' => $lname), WATCHDOG_INFO);
  return TRUE;
}

/**
 * Checks a given email to see if it was subscribed in Campaign Monitor.
 *
 * @return mixed status string if currently in Campaign Monitor, FALSE if not (or in case of CM error)
 *         Valid status strings:
 *         - Active
 *         - Unsubscribed
 *         - Deleted
 *         - Bounced
 *         - Unconfirmed
 *         - Suppressed
 */
function cm_webform_subscription_status(&$cm, $email) {
  $r = $cm->get($email);
  if (!$r->was_successful()) {
    return FALSE;
  }
  return $r->response->State;
}

/**
 * Implements hook_webform_submission_delete().
 */
function cm_webform_webform_submission_delete($node, $submission) {
  require_once libraries_get_path('createsend-php') . '/csrest_subscribers.php';
  $cm = new CS_REST_Subscribers('', variable_get('cm_apikey', ''), 'https');
  
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'cm_signup') {
      // Extract submitted values
      $list = $component['extra']['lists'];
      $cm->set_list_id($list);
      
      // Field containing email address is based on the component configuration
      $email = $submission->data[$component['extra']['email_field']]['value'][0];
      
      if (cm_webform_subscription_status($email) != 'Unsubscribed') {
        cm_webform_unsubscribe($cm, $list, $email);
      }
    }
  }
}

/**
 * Implements hook_form_alter() to intercept multi-page webforms which have a cm_submit field.
 * If the email field is filled out already, we can fill in the form with the subscriber info.
 *
 * Supports multiple subscription editing. Add multiple cm_signup fields, one for each list,
 * and select the custom fields for that list. This will load the fields for each as long as the
 * user is subscribed to all of them.
 */
function cm_webform_form_alter($form, &$form_state, $form_id) {
  require_once libraries_get_path('createsend-php') . '/csrest_subscribers.php';
  
  if (isset($form_state['webform']) && !empty($form_state['post'])) {
    $emailFound = FALSE;
    $cmFieldExists = FALSE;
    foreach ($form_state['webform']['component_tree']['children'] as $cid => $component) {
      if ($component['type'] == 'cm_signup') {
        $cmFieldExists = TRUE;
        
        // Check that the complete form hasn't been submitted.
        if ($form_state['post']['details']['page_num'] == $form_state['post']['details']['page_count']) {
          return;
        }
        
        // Fetch the email address POSTed to us, if it exists
        if (isset($form_state['post']['submitted'][$form_state['webform']['component_tree']['children'][$component['extra']['email_field']]['form_key']])) {
          $email = $form_state['post']['submitted'][$form_state['webform']['component_tree']['children'][$component['extra']['email_field']]['form_key']];
          
          // Now fetch the old subscriber info and dump it into the fields here.
          $cm = new CS_REST_Subscribers($component['extra']['lists'], variable_get('cm_apikey', ''), 'https');
          $r = $cm->get($email);
          
          // If they're not in Campaign Monitor's lists, skip this list
          if (!$r->was_successful()) {
            continue;
          }
          
          $emailFound = TRUE;
          
          $fields = array();
          foreach ($r->response->CustomFields as $field) {
            $fields[$field->Key] = $field->Value;
          }

          $form_state['webform']['component_tree']['children'][$component['extra']['name_field']]['value'] = $r->response->Name;
          $custom_fields = array_filter($component['extra']['custom_fields']);
          
          // Iterate through user-editable fields, find their matches in $fields, and fill in the data
          foreach ($custom_fields as $fid => $foo) {
            if (isset($fields[$form_state['webform']['component_tree']['children'][$fid]['form_key']])) {
              $form_state['webform']['component_tree']['children'][$fid]['value'] =
                $fields[$form_state['webform']['component_tree']['children'][$fid]['form_key']];
            }
          }
          
          // We fill in the field data even for users listed as "unsubscribed," but we should only check
          // the subscription box for those who are currently active.
          if ($r->response->State == 'Active') {
            $form_state['webform']['component_tree']['children'][$cid]['value'] = '1';
          }
        }
      }
    }
    
    if ($cmFieldExists && !$emailFound) {
      drupal_set_message(t('The email address you provided is not currently subscribed to our mailing list, but you may choose to subscribe by filling out the form below.'),
                         'warning');
    }
  }
}

/**
 * Either (a) get all lists or (b) get a specific list.
 *
 * @return array listID => list name array
 *  or
 * @return string the list name
 */
function cm_webform_get_lists($lid = NULL) {
  static $lists = array();
  
  if (empty($lists)) {
    require_once libraries_get_path('createsend-php') . '/csrest_clients.php';
    $cm = new CS_REST_Clients(variable_get('cm_clientid', ''), variable_get('cm_apikey', ''), 'https');
    $ll = $cm->get_lists();
    
    if (empty($ll->response)) {
        return FALSE;
    }
    
    foreach ($ll->response as $l) {
      $lists[$l->ListID] = $l->Name;
    }
  }
  
  if ($lid != NULL) {
    return $lists[$lid];
  }
  
  return $lists;
}

/**
 * Implements hook_help().
 */
function cm_webform_help($path, $arg) {
  $h = '';
  switch ($path) {
    case 'admin/help#cm_webform':
      $h .= '<h3>' . t('About') . '</h3>';
      $h .= '<p>' . t('The Campaign Monitor Webform module provides Campaign Monitor integration with Webform, letting users of any Webform sign up for your newsletters or marketing campaigns with a simple checkbox. Users can also edit their subscription information or unsubscribe entirely through easy-to-implement webforms.') . '</p>';
      
      $h .= '<h3>' . t('Creating a Campaign Monitor Webform') . '</h3>';
      $h .= '<p>' . t('Any Webform that accepts an email address can be used to subscribe a user to Campaign Monitor. The process is simple:') . '</p>';
      
      $h .= '<ol>';
      $h .= '<li>' . t('Create a Webform that asks for whatever information you might want from the user. Be sure to include an email field for their email address.') . '</li>';
      $h .= '<li>' . t('Add a "Campaign Monitor list signup" component to the form. Label it whatever you want; the label will be displayed next to the opt-in checkbox, so make it something like "Subscribe to our newsletter".') . '</li>';
      $h .= '<li>' . t('Choose the Campaign Monitor mailing list you want the user to be signed up for if they check the box.') . '</li>';
      $h .= '<li>' . t("Select which fields will be used as the user's name and email address. Also check which other custom fields should be sent to Campaign Monitor; their field keys (shown in parentheses) must correspond to Campaign Monitor's custom field names directly.") . '</li>';
      $h .= '<li>' . t('Save the component and arrange your form as you\'d like it. If you want the user to be able to subscribe to other lists with the same form, just add another "Campaign Monitor list signup" component.') . '</li>';
      $h .= '</ol>';
      
      $h .= '<p>' . t('Note that the checkbox is unchecked by default; Campaign Monitor\'s anti-spam policy requires all forms to be explicitly opt-in.') . '</p>';
      
      $h .= '<h3>' . t('Editing subcriptions') . '</h3>';
      $h .= '<p>' . t('Logged-in users will see a "You have already submitted this form. View your previous submissions" link at the top of any Webform they\'ve previously submitted, and they may edit their submissions from there. Should they change their email address, any custom fields, or their subscription status on a Campaign Monitor form, their subscription information will be automatically changed in Campaign Monitor.') . '</p>';
      $h .= '<p>' . t("If you'd like guests to be able to edit their subscriptions, you can create a special Webform to do it. Here's how:") . '</p>';
      
      $h .= '<ol>';
      $h .= '<li>' . t('Create a new Webform. Make an email component as the very first component, and add a "Page break" component directly after it.') . '</li>';
      $h .= '<li>' . t('After the page break, add any fields the user should be able to edit, such as custom fields sent to Campaign Monitor or their name.') . '</li>';
      $h .= '<li>' . t('Finally, add a "Campaign Monitor list signup" field and specify the list subscription the user should be able to edit, and select the custom fields that will be synced with Campaign Monitor.') . '</li>';
      $h .= '</ol>';
      
      $h .= '<p>' . t('That\'s it! When a list subscriber enters their email address on the first page of the form and proceeds to the next page, it will automatically be filled in with their information from Campaign Monitor. When they change details or uncheck the "subscribe" checkbox, the updates will be synced with Campaign Monitor automatically. If you add multiple list signup fields, their subscriptions to multiple mailing lists can be edited simultaneously!') . '</p>';
      $h .= '<p>' . t('You might choose to link to this page from your email campaigns, so users can edit their information directly from your site, rather than unsubscribing through a Campaign Monitor branded form.') . '</p>';
      $h .= '<p>' . t('<strong>Warning:</strong> By default, Campaign Monitor unsubscribes a user from <em>all</em> of your lists if they unsubscribe from only one. If you\'d like the user to be able to subscribe and unsubscribe from multiple lists freely, find the "Unsubscribe settings" page in your Campaign Monitor list settings and adjust the unsubscribe behavior to only unsubscribe them from the specified list.') . '</p>';
      break;
    
    case 'node/%/webform':
      $h .= '<p>' . t('If you\'d like this form\'s results to be sent to Campaign Monitor for list subscription information, make sure it has a "Campaign Monitor list signup" field.') . '</p>';
      break;
  }
  
  return $h;
}
